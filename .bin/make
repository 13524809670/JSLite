#!/usr/bin/env node

var fs = require('fs');
var clc = require('cli-color');
var conf = require('../package')
var jslite_js  = 'dist/JSLite.js';
var jslite_min = 'dist/JSLite.min.js';
var jslite_map = 'dist/JSLite.min.map';
var jslite_gz  = 'dist/JSLite.min.gz';
var root = __dirname + '/';
var version = conf.version;
var log = console.log;

require('shelljs/make');

//路径切换到项目根目录
root = exec('pwd').output.replace(/\s+$/,'/')

//执行全部实例
target.all = function() {
    target[jslite_js]();
};

//如果路径不存在，构建 JSLite.js 文件
target[jslite_js] = function() {
    if (!test('-e', jslite_js)) {
        return target.build();
    }
};

//文件代码压缩
target[jslite_min] = function() {
    if (stale(jslite_min, jslite_js)) {
        return target.minify();
    }
};

//打包压缩js文件
target[jslite_gz] = function() {
    if (stale(jslite_gz, jslite_min)) {
        return target.compress();
    }
};

//指定source map和网站来源
target[jslite_map] = function() {
    if (stale(jslite_map, jslite_min)) {
        return target.minify_map();
    }
};

//生成合成文件
target.dist = function() {
    target.build();
    target.minify();
    target.minify_map();
    return target.compress();
};

//构建生成 JSLite.js 文件
target.build = function() {
    var dist, intro, module, module_files, modules;
    // 进入到当前目录
    cd(root);
    // 生成dist
    mkdir('-p', 'dist');
    modules = (env['MODULES'] ? 'start polyfill var function ' + env['MODULES'] + ' end' : 'start polyfill var function JSLite traversing manipulation attribute css effect dimensions form event ajax end').split(' ');
    // 输出要合并的所有文件的路径
    module_files = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          module = modules[_i];
          _results.push("src/" + module + ".js");
        }
        return _results;
    })();
    log(clc.xterm(46)("\n合并的js模块：\n"));
    log(" " + module_files.join('\n ') + '\n');
    // 输出JSLite说明到 JSLite.js 里面
    intro = "/* JSLite " + (describe_version()) + " - " + (modules.join(' ')) + " - jslite.io */\n";
    // 合并代码
    dist = (intro + cat(module_files).replace(/^\/[\/*].*$/mg, '')).replace(/\n{3,}/g, "\n\n");
    dist.to(jslite_js);
    return report_size(jslite_js);
};

//文件代码压缩
target.minify = function() {
    var intro, jslite_code, dist;
    if (!test('-e', jslite_js)) target.build();
    jslite_code = cat(jslite_js);
    intro = jslite_code.slice(0, jslite_code.indexOf("\n") + 1);
    dist = intro + minify(jslite_code)
    dist.to(jslite_min);
    return report_size(jslite_min);
};

//指定source map和网站来源
target.minify_map = function() {
    var jslite_code,dist;
    dist = minify(true);
    dist.to(jslite_map);
    return report_size(jslite_map);
};

//打包压缩js文件
target.compress = function() {
    var gzip, inp, out;
    gzip = require('zlib').createGzip();
    inp = fs.createReadStream(jslite_min);
    out = fs.createWriteStream(jslite_gz);
    inp.pipe(gzip).pipe(out);
    return out.on('close', function() {
        report_size(jslite_gz);
        var factor = fsize(jslite_js) / fsize(jslite_gz);
        return echo(clc.xterm(46)("\n compression factor: " + (format_number(factor))+'\n'));
    });
};

stale = function(file, source) {
    target[source]();
    return !test('-e', file) || mtime(file) < mtime(source);
};

mtime = function(file) {
    log(fs.statSync(file).mtime)
    return fs.statSync(file).mtime.getTime();
};

// 文件压缩代码压缩
// 使用插件 [UglifyJS 2](https://github.com/mishoo/UglifyJS2)
minify = function(map) {
    var UglifyJS = require("uglify-js");
    result = UglifyJS.minify([root+jslite_js],{
        outSourceMap: jslite_map,
        sourceRoot: "http://jslite.io",
        mangle:true
    });
    if(map) return result.map;
    else return result.code;
};

//返回版本描述
describe_version = function() {
    var desc = exec("git --git-dir='" + (root + '.git') + "' describe --tags HEAD", {
        silent: true
    });
    if (desc.code === 0) return desc.output.replace(/\s+$/, '');
    else return version;
};

//换算
format_number = function(size, precision) {
    var decimal, factor;
    if (precision == null) precision = 1;
    factor = Math.pow(10, precision);
    decimal = Math.round(size * factor) % factor;
    return parseInt(size) + "." + decimal;
};

//统计文件字节数
fsize = function(file) {
    return fs.statSync(file).size;
};

//输出大小
report_size = function(file) {
    return echo(" › " + clc.xterm(161)(file)  + ": " + (format_number(fsize(file) / 1024)) + " KiB");
};